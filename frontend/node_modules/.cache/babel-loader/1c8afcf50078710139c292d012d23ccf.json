{"ast":null,"code":"import axios from \"axios\";\nimport * as actions from \"../actions/api\";\nimport { EnhancedStore } from \"@reduxjs/toolkit\";\nimport { store } from \"../store\";\nimport queryString from \"query-string\";\nimport qs from \"qs\";\nimport { moment } from \"moment\";\n\nconst api = store => next => async action => {\n  if (action.type !== actions.apiCallBegan.type) return next(action);\n  next(action);\n  const {\n    url,\n    method,\n    data,\n    onSuccess,\n    onError,\n    params\n  } = action.payload;\n\n  try {\n    console.log(params);\n    axios.interceptors.request.use(config => {\n      config.paramsSerializer = params => qs.stringify(params, {\n        serializeDate: date => moment(date).format(\"YYYY-MM-DDTHH:mm:ssZ\")\n      });\n\n      return config;\n    });\n    const responce = await axios.request({\n      baseURL: process.env.REACT_APP_API,\n      url,\n      method,\n      data,\n      params\n    });\n    store.dispatch(actions.apiCallSuccess(responce.data));\n    if (onSuccess) store.dispatch({\n      type: onSuccess,\n      payload: responce.data\n    });\n  } catch (error) {\n    store.dispatch(actions.apiCallFailed(error));\n    if (onError) store.dispatch({\n      type: onError,\n      payload: error\n    });\n  }\n};\n\nexport default api;","map":{"version":3,"sources":["C:/projects/video-hoster/frontend/src/store/middleware/api.js"],"names":["axios","actions","EnhancedStore","store","queryString","qs","moment","api","next","action","type","apiCallBegan","url","method","data","onSuccess","onError","params","payload","console","log","interceptors","request","use","config","paramsSerializer","stringify","serializeDate","date","format","responce","baseURL","process","env","REACT_APP_API","dispatch","apiCallSuccess","error","apiCallFailed"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,MAAMC,GAAG,GAAIJ,KAAD,IAAYK,IAAD,IAAU,MAAOC,MAAP,IAAkB;AACjD,MAAIA,MAAM,CAACC,IAAP,KAAgBT,OAAO,CAACU,YAAR,CAAqBD,IAAzC,EAA+C,OAAOF,IAAI,CAACC,MAAD,CAAX;AAE/CD,EAAAA,IAAI,CAACC,MAAD,CAAJ;AACA,QAAM;AAAEG,IAAAA,GAAF;AAAOC,IAAAA,MAAP;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA,SAArB;AAAgCC,IAAAA,OAAhC;AAAyCC,IAAAA;AAAzC,MAAoDR,MAAM,CAACS,OAAjE;;AACA,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAjB,IAAAA,KAAK,CAACqB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACzCA,MAAAA,MAAM,CAACC,gBAAP,GAA2BR,MAAD,IACxBZ,EAAE,CAACqB,SAAH,CAAaT,MAAb,EAAqB;AACnBU,QAAAA,aAAa,EAAGC,IAAD,IAAUtB,MAAM,CAACsB,IAAD,CAAN,CAAaC,MAAb,CAAoB,sBAApB;AADN,OAArB,CADF;;AAIA,aAAOL,MAAP;AACD,KAND;AAQA,UAAMM,QAAQ,GAAG,MAAM9B,KAAK,CAACsB,OAAN,CAAc;AACnCS,MAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADc;AAEnCtB,MAAAA,GAFmC;AAGnCC,MAAAA,MAHmC;AAInCC,MAAAA,IAJmC;AAKnCG,MAAAA;AALmC,KAAd,CAAvB;AAQAd,IAAAA,KAAK,CAACgC,QAAN,CAAelC,OAAO,CAACmC,cAAR,CAAuBN,QAAQ,CAAChB,IAAhC,CAAf;AACA,QAAIC,SAAJ,EAAeZ,KAAK,CAACgC,QAAN,CAAe;AAAEzB,MAAAA,IAAI,EAAEK,SAAR;AAAmBG,MAAAA,OAAO,EAAEY,QAAQ,CAAChB;AAArC,KAAf;AAChB,GApBD,CAoBE,OAAOuB,KAAP,EAAc;AACdlC,IAAAA,KAAK,CAACgC,QAAN,CAAelC,OAAO,CAACqC,aAAR,CAAsBD,KAAtB,CAAf;AAEA,QAAIrB,OAAJ,EAAab,KAAK,CAACgC,QAAN,CAAe;AAAEzB,MAAAA,IAAI,EAAEM,OAAR;AAAiBE,MAAAA,OAAO,EAAEmB;AAA1B,KAAf;AACd;AACF,CA9BD;;AAgCA,eAAe9B,GAAf","sourcesContent":["import axios from \"axios\";\r\nimport * as actions from \"../actions/api\";\r\nimport { EnhancedStore } from \"@reduxjs/toolkit\";\r\nimport { store } from \"../store\";\r\nimport queryString from \"query-string\";\r\nimport qs from \"qs\";\r\n\r\nimport { moment } from \"moment\";\r\n\r\nconst api = (store) => (next) => async (action) => {\r\n  if (action.type !== actions.apiCallBegan.type) return next(action);\r\n\r\n  next(action);\r\n  const { url, method, data, onSuccess, onError, params } = action.payload;\r\n  try {\r\n    console.log(params);\r\n    axios.interceptors.request.use((config) => {\r\n      config.paramsSerializer = (params) =>\r\n        qs.stringify(params, {\r\n          serializeDate: (date) => moment(date).format(\"YYYY-MM-DDTHH:mm:ssZ\"),\r\n        });\r\n      return config;\r\n    });\r\n\r\n    const responce = await axios.request({\r\n      baseURL: process.env.REACT_APP_API,\r\n      url,\r\n      method,\r\n      data,\r\n      params,\r\n    });\r\n\r\n    store.dispatch(actions.apiCallSuccess(responce.data));\r\n    if (onSuccess) store.dispatch({ type: onSuccess, payload: responce.data });\r\n  } catch (error) {\r\n    store.dispatch(actions.apiCallFailed(error));\r\n\r\n    if (onError) store.dispatch({ type: onError, payload: error });\r\n  }\r\n};\r\n\r\nexport default api;\r\n"]},"metadata":{},"sourceType":"module"}