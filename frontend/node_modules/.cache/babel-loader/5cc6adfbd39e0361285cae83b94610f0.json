{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport api from \"./middleware/api\";\nimport { createAction } from \"@reduxjs/toolkit\";\nimport titleReducer, { titleSlice } from './slices/TitleSlice';\nexport const store = configureStore({\n  reducer: titleReducer,\n  middleware: [...getDefaultMiddleware(), api]\n});\nconst apiCallBegan = createAction(\"api/CallBegan\");\napiCallBegan({\n  url: \"/titleBases\",\n  onSuccess: titleSlice.actions.titlesRecevied.type\n});\nstore.dispatch(apiCallBegan({\n  url: \"/titleBases\",\n  onSuccess: titleSlice.actions.titlesRecevied.type\n}));\nconsole.log(store.getState());","map":{"version":3,"sources":["C:/projects/video-hoster/frontend/src/store/store.ts"],"names":["configureStore","getDefaultMiddleware","api","createAction","titleReducer","titleSlice","store","reducer","middleware","apiCallBegan","url","onSuccess","actions","titlesRecevied","type","dispatch","console","log","getState"],"mappings":"AAAA,SAASA,cAAT,EAA8CC,oBAA9C,QAA0E,kBAA1E;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,YAAP,IAAwBC,UAAxB,QAAyC,qBAAzC;AAEA,OAAO,MAAMC,KAAK,GAAGN,cAAc,CAAC;AAClCO,EAAAA,OAAO,EAAEH,YADyB;AAElCI,EAAAA,UAAU,EAAE,CAAC,GAAGP,oBAAoB,EAAxB,EAA2BC,GAA3B;AAFsB,CAAD,CAA5B;AAKP,MAAMO,YAAY,GAAGN,YAAY,CAAS,eAAT,CAAjC;AACAM,YAAY,CAAC;AAACC,EAAAA,GAAG,EAAE,aAAN;AACbC,EAAAA,SAAS,EAAEN,UAAU,CAACO,OAAX,CAAmBC,cAAnB,CAAkCC;AADhC,CAAD,CAAZ;AAGAR,KAAK,CAACS,QAAN,CAAeN,YAAY,CAAC;AAC1BC,EAAAA,GAAG,EAAE,aADqB;AAE1BC,EAAAA,SAAS,EAAEN,UAAU,CAACO,OAAX,CAAmBC,cAAnB,CAAkCC;AAFnB,CAAD,CAA3B;AAIAE,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACY,QAAN,EAAZ","sourcesContent":["import { configureStore, ThunkAction, Action, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport api from \"./middleware/api\";\r\nimport {loadTitleBases } from './slices/TitleSlice'\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\nimport titleReducer , { titleSlice} from './slices/TitleSlice'\r\n\r\nexport const store = configureStore({\r\n  reducer: titleReducer,\r\n  middleware: [...getDefaultMiddleware(),api],\r\n});\r\n\r\nconst apiCallBegan = createAction<object>(\"api/CallBegan\");\r\napiCallBegan({url: \"/titleBases\",\r\nonSuccess: titleSlice.actions.titlesRecevied.type,})\r\n\r\nstore.dispatch(apiCallBegan({\r\n  url: \"/titleBases\",\r\n  onSuccess: titleSlice.actions.titlesRecevied.type,\r\n}));\r\nconsole.log(store.getState());\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n"]},"metadata":{},"sourceType":"module"}