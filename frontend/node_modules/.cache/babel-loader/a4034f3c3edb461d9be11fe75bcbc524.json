{"ast":null,"code":"import moment from \"moment\";\nimport \"moment/locale/ru\";\nexport let createScheduleChunk = entities => {\n  let result = [];\n  entities.forEach(element => {\n    const locale = moment(element.episodeReleaseTime).locale(\"ru\").format(\"dddd\");\n\n    if (result.filter(elementCat => elementCat.name === locale).length > 0) {\n      result.filter(elementCat => elementCat.name === locale)[0].titleElements.push(element);\n    } else {\n      result.push({\n        name: locale,\n        titleElements: [element]\n      });\n    }\n  });\n  return result;\n};\nexport let createChunkByDate = entities => {\n  let result = [];\n};","map":{"version":3,"sources":["C:/projects/video-hoster/frontend/src/helperFunctions/createChunk.ts"],"names":["moment","createScheduleChunk","entities","result","forEach","element","locale","episodeReleaseTime","format","filter","elementCat","name","length","titleElements","push","createChunkByDate"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAIA,OAAO,kBAAP;AAIA,OAAO,IAAIC,mBAAmB,GAC5BC,QAD+B,IAED;AAC9B,MAAIC,MAAiC,GAAG,EAAxC;AAEAD,EAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAyB;AACxC,UAAMC,MAAM,GAAGN,MAAM,CAACK,OAAO,CAACE,kBAAT,CAAN,CACZD,MADY,CACL,IADK,EAEZE,MAFY,CAEL,MAFK,CAAf;;AAGA,QAAIL,MAAM,CAACM,MAAP,CAAeC,UAAD,IAAgBA,UAAU,CAACC,IAAX,KAAoBL,MAAlD,EAA0DM,MAA1D,GAAmE,CAAvE,EAA0E;AACxET,MAAAA,MAAM,CACHM,MADH,CACWC,UAAD,IAAgBA,UAAU,CAACC,IAAX,KAAoBL,MAD9C,EACsD,CADtD,EAEGO,aAFH,CAEiBC,IAFjB,CAEsBT,OAFtB;AAGD,KAJD,MAIO;AACLF,MAAAA,MAAM,CAACW,IAAP,CAAY;AAAEH,QAAAA,IAAI,EAAEL,MAAR;AAAgBO,QAAAA,aAAa,EAAE,CAACR,OAAD;AAA/B,OAAZ;AACD;AACF,GAXD;AAYA,SAAOF,MAAP;AACD,CAlBM;AAoBP,OAAO,IAAIY,iBAAiB,GAC1Bb,QAD6B,IAEC;AAC9B,MAAIC,MAAiC,GAAG,EAAxC;AACD,CAJM","sourcesContent":["import moment from \"moment\";\r\nimport _, { forEach } from \"underscore\";\r\nimport { ITitleBase } from \"./../Interfaceses/ITitleBase\";\r\nimport { ITitleDropdownList } from \"./../Interfaceses/ITitleDropdownList\";\r\nimport \"moment/locale/ru\";\r\n\r\nexport interface GroupEntity {}\r\n\r\nexport let createScheduleChunk = (\r\n  entities: ITitleBase[]\r\n): Array<ITitleDropdownList> => {\r\n  let result: Array<ITitleDropdownList> = [];\r\n\r\n  entities.forEach((element: ITitleBase) => {\r\n    const locale = moment(element.episodeReleaseTime)\r\n      .locale(\"ru\")\r\n      .format(\"dddd\");\r\n    if (result.filter((elementCat) => elementCat.name === locale).length > 0) {\r\n      result\r\n        .filter((elementCat) => elementCat.name === locale)[0]\r\n        .titleElements.push(element);\r\n    } else {\r\n      result.push({ name: locale, titleElements: [element] });\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nexport let createChunkByDate = (\r\n  entities: ITitleBase[]\r\n): Array<ITitleDropdownList> => {\r\n  let result: Array<ITitleDropdownList> = [];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}