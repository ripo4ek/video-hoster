{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { apiCallBegan } from '../actions/api';\nimport filterToApi from './../../helperFunctions/FilterToApi';\n\nconst propertyOf = name => name;\n\nconst initialState = {\n  titleSearch: [],\n  topRaitedTitles: [],\n  updatedTitles: [],\n  newTitles: []\n};\nexport const titleSlice = createSlice({\n  name: 'titleBases',\n  initialState,\n  reducers: {\n    titleSearchRecevied: (state, action) => {\n      state.titleSearch = [...state.titleSearch, ...action.payload];\n    },\n    topRatiedTitlesRecevied: (state, action) => {\n      state.topRaitedTitles = [...state.topRaitedTitles, ...action.payload];\n    },\n    updatedTitlesRecevied: (state, action) => {\n      state.updatedTitles = [...state.updatedTitles, ...action.payload];\n    },\n    newTitlesRecevied: (state, action) => {\n      state.newTitles = [...state.newTitles, ...action.payload];\n    }\n  }\n});\nexport default titleSlice.reducer;\nexport const {\n  titleSearchRecevied,\n  topRatiedTitlesRecevied,\n  updatedTitlesRecevied,\n  newTitlesRecevied\n} = titleSlice.actions;\nexport const loadTitleBasesSearch = filter => {\n  if (typeof filter === 'undefined') filter = {\n    itemsToTake: 5\n  };\n  const apiData = {\n    url: '/titleBases',\n    onSuccess: titleSlice.actions.titleSearchRecevied.type,\n    params: filterToApi(filter)\n  };\n  return apiCallBegan(apiData);\n};\nexport const loadTopRatiedTitleBases = (itemsToTake, skipItems) => {\n  let filter = {\n    itemsToTake,\n    skipItems,\n    filterBy: propertyOf('userRating')\n  };\n  const apiData = {\n    url: '/titleBases',\n    onSuccess: titleSlice.actions.topRatiedTitlesRecevied.type,\n    params: filterToApi(filter)\n  };\n  return apiCallBegan(apiData);\n};\nexport const loadUpdatedTitleBases = (itemsToTake, skipItems) => {\n  let filter = {\n    itemsToTake,\n    skipItems,\n    filterBy: propertyOf('lastUpdated')\n  };\n  const apiData = {\n    url: '/titleBases',\n    onSuccess: titleSlice.actions.updatedTitlesRecevied.type,\n    params: filterToApi(filter)\n  };\n  return apiCallBegan(apiData);\n};\nexport const loadnewTitleBases = (itemsToTake, skipItems) => {\n  let filter = {\n    itemsToTake,\n    skipItems,\n    filterBy: propertyOf('addedOnSite')\n  };\n  const apiData = {\n    url: '/titleBases',\n    onSuccess: titleSlice.actions.newTitlesRecevied.type,\n    params: filterToApi(filter)\n  };\n  return apiCallBegan(apiData);\n};","map":{"version":3,"sources":["C:/projects/video-hoster/frontend/src/store/slices/TitleSlice.ts"],"names":["createSlice","apiCallBegan","filterToApi","propertyOf","name","initialState","titleSearch","topRaitedTitles","updatedTitles","newTitles","titleSlice","reducers","titleSearchRecevied","state","action","payload","topRatiedTitlesRecevied","updatedTitlesRecevied","newTitlesRecevied","reducer","actions","loadTitleBasesSearch","filter","itemsToTake","apiData","url","onSuccess","type","params","loadTopRatiedTitleBases","skipItems","filterBy","loadUpdatedTitleBases","loadnewTitleBases"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { apiCallBegan, IApiData } from '../actions/api'\r\nimport { ITitleBase } from '../../Interfaceses/ITitleBase'\r\nimport { store } from '../store'\r\nimport { stat } from 'fs'\r\nimport { ITitleFilter } from './../../Interfaceses/ITitleFilter'\r\nimport filterToApi from './../../helperFunctions/FilterToApi'\r\n\r\ninterface TitleBaseSliceState {\r\n  titleSearch: Array<ITitleBase>\r\n  topRaitedTitles: Array<ITitleBase>\r\n  updatedTitles: Array<ITitleBase>\r\n  newTitles: Array<ITitleBase>\r\n}\r\nconst propertyOf = <TObj>(name: keyof TObj) => name\r\n\r\nconst initialState: TitleBaseSliceState = {\r\n  titleSearch: [],\r\n  topRaitedTitles: [],\r\n  updatedTitles: [],\r\n  newTitles: [],\r\n}\r\nexport const titleSlice = createSlice({\r\n  name: 'titleBases',\r\n  initialState,\r\n  reducers: {\r\n    titleSearchRecevied: (state: TitleBaseSliceState, action) => {\r\n      state.titleSearch = [...state.titleSearch, ...action.payload]\r\n    },\r\n    topRatiedTitlesRecevied: (state: TitleBaseSliceState, action) => {\r\n      state.topRaitedTitles = [...state.topRaitedTitles, ...action.payload]\r\n    },\r\n    updatedTitlesRecevied: (state: TitleBaseSliceState, action) => {\r\n      state.updatedTitles = [...state.updatedTitles, ...action.payload]\r\n    },\r\n    newTitlesRecevied: (state: TitleBaseSliceState, action) => {\r\n      state.newTitles = [...state.newTitles, ...action.payload]\r\n    },\r\n  },\r\n})\r\n\r\nexport default titleSlice.reducer\r\nexport const {\r\n  titleSearchRecevied,\r\n  topRatiedTitlesRecevied,\r\n  updatedTitlesRecevied,\r\n  newTitlesRecevied,\r\n} = titleSlice.actions\r\n\r\nexport const loadTitleBasesSearch = (filter?: ITitleFilter) => {\r\n  if (typeof filter === 'undefined') filter = { itemsToTake: 5 }\r\n  const apiData: IApiData = {\r\n    url: '/titleBases',\r\n    onSuccess: titleSlice.actions.titleSearchRecevied.type,\r\n    params: filterToApi(filter),\r\n  }\r\n\r\n  return apiCallBegan(apiData)\r\n}\r\nexport const loadTopRatiedTitleBases = (\r\n  itemsToTake?: number,\r\n  skipItems?: number,\r\n) => {\r\n  let filter: ITitleFilter = {\r\n    itemsToTake,\r\n    skipItems,\r\n    filterBy: propertyOf<ITitleBase>('userRating'),\r\n  }\r\n  const apiData: IApiData = {\r\n    url: '/titleBases',\r\n    onSuccess: titleSlice.actions.topRatiedTitlesRecevied.type,\r\n    params: filterToApi(filter),\r\n  }\r\n\r\n  return apiCallBegan(apiData)\r\n}\r\nexport const loadUpdatedTitleBases = (\r\n  itemsToTake?: number,\r\n  skipItems?: number,\r\n) => {\r\n  let filter: ITitleFilter = {\r\n    itemsToTake,\r\n    skipItems,\r\n    filterBy: propertyOf<ITitleBase>('lastUpdated'),\r\n  }\r\n  const apiData: IApiData = {\r\n    url: '/titleBases',\r\n    onSuccess: titleSlice.actions.updatedTitlesRecevied.type,\r\n    params: filterToApi(filter),\r\n  }\r\n\r\n  return apiCallBegan(apiData)\r\n}\r\nexport const loadnewTitleBases = (itemsToTake?: number, skipItems?: number) => {\r\n  let filter: ITitleFilter = {\r\n    itemsToTake,\r\n    skipItems,\r\n    filterBy: propertyOf<ITitleBase>('addedOnSite'),\r\n  }\r\n  const apiData: IApiData = {\r\n    url: '/titleBases',\r\n    onSuccess: titleSlice.actions.newTitlesRecevied.type,\r\n    params: filterToApi(filter),\r\n  }\r\n\r\n  return apiCallBegan(apiData)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}