{"ast":null,"code":"import moment from 'moment';\nimport 'moment/locale/ru';\nimport dateFormatter from './dateFormatter';\nimport capitalize from './capitalize'; //TODO: Избавиться от Code Polution\n\nexport let createScheduleChunk = entities => {\n  let result = [];\n  entities.forEach(element => {\n    const date = capitalize(moment(element.episodeReleaseTime).locale('ru').format('dddd'));\n\n    if (result.filter(elementCat => elementCat.name === date).length > 0) {\n      result.filter(elementCat => elementCat.name === date)[0].titleElements.push(element);\n    } else {\n      result.push({\n        name: date,\n        titleElements: [element]\n      });\n    }\n  });\n  return result;\n};\nexport let createChunkByLastUpdated = entities => {\n  let result = [];\n  entities.forEach(element => {\n    const date = dateFormatter(element.lastUpdated);\n\n    if (result.filter(elementCat => elementCat.name === date).length > 0) {\n      result.filter(elementCat => elementCat.name === date)[0].titleElements.push(element);\n    } else {\n      result.push({\n        name: date,\n        titleElements: [element]\n      });\n    }\n  });\n  return result;\n};\n\nlet Contains = (array, name) => array.filter(elementCat => elementCat.name === name).length > 0;","map":{"version":3,"sources":["C:/projects/video-hoster/frontend/src/helperFunctions/createChunk.ts"],"names":["moment","dateFormatter","capitalize","createScheduleChunk","entities","result","forEach","element","date","episodeReleaseTime","locale","format","filter","elementCat","name","length","titleElements","push","createChunkByLastUpdated","lastUpdated","Contains","array"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAGA,OAAO,kBAAP;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AAIA,OAAO,IAAIC,mBAAmB,GAC5BC,QAD+B,IAED;AAC9B,MAAIC,MAAiC,GAAG,EAAxC;AAEAD,EAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAyB;AACxC,UAAMC,IAAI,GAAGN,UAAU,CACrBF,MAAM,CAACO,OAAO,CAACE,kBAAT,CAAN,CAAmCC,MAAnC,CAA0C,IAA1C,EAAgDC,MAAhD,CAAuD,MAAvD,CADqB,CAAvB;;AAGA,QAAIN,MAAM,CAACO,MAAP,CAAeC,UAAD,IAAgBA,UAAU,CAACC,IAAX,KAAoBN,IAAlD,EAAwDO,MAAxD,GAAiE,CAArE,EAAwE;AACtEV,MAAAA,MAAM,CACHO,MADH,CACWC,UAAD,IAAgBA,UAAU,CAACC,IAAX,KAAoBN,IAD9C,EACoD,CADpD,EAEGQ,aAFH,CAEiBC,IAFjB,CAEsBV,OAFtB;AAGD,KAJD,MAIO;AACLF,MAAAA,MAAM,CAACY,IAAP,CAAY;AAAEH,QAAAA,IAAI,EAAEN,IAAR;AAAcQ,QAAAA,aAAa,EAAE,CAACT,OAAD;AAA7B,OAAZ;AACD;AACF,GAXD;AAYA,SAAOF,MAAP;AACD,CAlBM;AAoBP,OAAO,IAAIa,wBAAwB,GACjCd,QADoC,IAEN;AAC9B,MAAIC,MAAiC,GAAG,EAAxC;AACAD,EAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAyB;AACxC,UAAMC,IAAI,GAAGP,aAAa,CAACM,OAAO,CAACY,WAAT,CAA1B;;AACA,QAAId,MAAM,CAACO,MAAP,CAAeC,UAAD,IAAgBA,UAAU,CAACC,IAAX,KAAoBN,IAAlD,EAAwDO,MAAxD,GAAiE,CAArE,EAAwE;AACtEV,MAAAA,MAAM,CACHO,MADH,CACWC,UAAD,IAAgBA,UAAU,CAACC,IAAX,KAAoBN,IAD9C,EACoD,CADpD,EAEGQ,aAFH,CAEiBC,IAFjB,CAEsBV,OAFtB;AAGD,KAJD,MAIO;AACLF,MAAAA,MAAM,CAACY,IAAP,CAAY;AAAEH,QAAAA,IAAI,EAAEN,IAAR;AAAcQ,QAAAA,aAAa,EAAE,CAACT,OAAD;AAA7B,OAAZ;AACD;AACF,GATD;AAWA,SAAOF,MAAP;AACD,CAhBM;;AAkBP,IAAIe,QAAQ,GAAG,CAACC,KAAD,EAA2BP,IAA3B,KACbO,KAAK,CAACT,MAAN,CAAcC,UAAD,IAAgBA,UAAU,CAACC,IAAX,KAAoBA,IAAjD,EAAuDC,MAAvD,GAAgE,CADlE","sourcesContent":["import moment from 'moment'\r\nimport { ITitleBase } from './../Interfaceses/ITitleBase'\r\nimport { ITitleDropdownList } from './../Interfaceses/ITitleDropdownList'\r\nimport 'moment/locale/ru'\r\nimport dateFormatter from './dateFormatter'\r\nimport capitalize from './capitalize'\r\n\r\n//TODO: Избавиться от Code Polution\r\n\r\nexport interface GroupEntity {}\r\n\r\nexport let createScheduleChunk = (\r\n  entities: Array<ITitleBase>,\r\n): Array<ITitleDropdownList> => {\r\n  let result: Array<ITitleDropdownList> = []\r\n\r\n  entities.forEach((element: ITitleBase) => {\r\n    const date = capitalize(\r\n      moment(element.episodeReleaseTime).locale('ru').format('dddd'),\r\n    )\r\n    if (result.filter((elementCat) => elementCat.name === date).length > 0) {\r\n      result\r\n        .filter((elementCat) => elementCat.name === date)[0]\r\n        .titleElements.push(element)\r\n    } else {\r\n      result.push({ name: date, titleElements: [element] })\r\n    }\r\n  })\r\n  return result\r\n}\r\n\r\nexport let createChunkByLastUpdated = (\r\n  entities: Array<ITitleBase>,\r\n): Array<ITitleDropdownList> => {\r\n  let result: Array<ITitleDropdownList> = []\r\n  entities.forEach((element: ITitleBase) => {\r\n    const date = dateFormatter(element.lastUpdated)\r\n    if (result.filter((elementCat) => elementCat.name === date).length > 0) {\r\n      result\r\n        .filter((elementCat) => elementCat.name === date)[0]\r\n        .titleElements.push(element)\r\n    } else {\r\n      result.push({ name: date, titleElements: [element] })\r\n    }\r\n  })\r\n\r\n  return result\r\n}\r\n\r\nlet Contains = (array: Array<ITitleBase>, name: string) =>\r\n  array.filter((elementCat) => elementCat.name === name).length > 0\r\n"]},"metadata":{},"sourceType":"module"}