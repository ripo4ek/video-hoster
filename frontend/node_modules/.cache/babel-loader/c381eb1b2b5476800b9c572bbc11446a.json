{"ast":null,"code":"import moment from 'moment';\nimport 'moment/locale/ru';\nimport dateFormatter from './dateFormatter';\nimport capitalize from './capitalize'; //TODO: Избавиться от Code Polution\n\nexport let createScheduleChunk = entities => {\n  let result = [];\n  entities.forEach(element => {\n    const date = capitalize(moment(element.episodeReleaseTime).locale('ru').format('dddd'));\n    addTitle(result, date, element);\n  });\n  return result;\n};\nexport let createLastUpdatedChunk = entities => {\n  let result = [];\n  entities.forEach(element => {\n    const date = dateFormatter(element.lastUpdated);\n    addTitle(result, date, element);\n  });\n  return result;\n};\n\nlet contains = (array, selector) => array.filter(elementCat => elementCat.name === selector).length > 0;\n\nlet getFirstList = (array, selector) => array.filter(elementCat => elementCat.name === selector)[0];\n\nlet addTitle = (array, selector, element) => {\n  if (contains(array, selector)) {\n    let list = getFirstList(array, selector);\n    list.titleElements.push(element);\n  } else {\n    array.push({\n      name: selector,\n      titleElements: [element]\n    });\n  }\n};","map":{"version":3,"sources":["C:/projects/video-hoster/frontend/src/helperFunctions/createChunk.ts"],"names":["moment","dateFormatter","capitalize","createScheduleChunk","entities","result","forEach","element","date","episodeReleaseTime","locale","format","addTitle","createLastUpdatedChunk","lastUpdated","contains","array","selector","filter","elementCat","name","length","getFirstList","list","titleElements","push"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAGA,OAAO,kBAAP;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AAIA,OAAO,IAAIC,mBAAmB,GAC5BC,QAD+B,IAED;AAC9B,MAAIC,MAAiC,GAAG,EAAxC;AAEAD,EAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAyB;AACxC,UAAMC,IAAI,GAAGN,UAAU,CACrBF,MAAM,CAACO,OAAO,CAACE,kBAAT,CAAN,CAAmCC,MAAnC,CAA0C,IAA1C,EAAgDC,MAAhD,CAAuD,MAAvD,CADqB,CAAvB;AAGAC,IAAAA,QAAQ,CAACP,MAAD,EAASG,IAAT,EAAeD,OAAf,CAAR;AACD,GALD;AAMA,SAAOF,MAAP;AACD,CAZM;AAcP,OAAO,IAAIQ,sBAAsB,GAC/BT,QADkC,IAEJ;AAC9B,MAAIC,MAAiC,GAAG,EAAxC;AAEAD,EAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAyB;AACxC,UAAMC,IAAI,GAAGP,aAAa,CAACM,OAAO,CAACO,WAAT,CAA1B;AACAF,IAAAA,QAAQ,CAACP,MAAD,EAASG,IAAT,EAAeD,OAAf,CAAR;AACD,GAHD;AAIA,SAAOF,MAAP;AACD,CAVM;;AAYP,IAAIU,QAAQ,GAAG,CAACC,KAAD,EAAmCC,QAAnC,KACbD,KAAK,CAACE,MAAN,CAAcC,UAAD,IAAgBA,UAAU,CAACC,IAAX,KAAoBH,QAAjD,EAA2DI,MAA3D,GAAoE,CADtE;;AAGA,IAAIC,YAAY,GAAG,CAACN,KAAD,EAAmCC,QAAnC,KACjBD,KAAK,CAACE,MAAN,CAAcC,UAAD,IAAgBA,UAAU,CAACC,IAAX,KAAoBH,QAAjD,EAA2D,CAA3D,CADF;;AAGA,IAAIL,QAAQ,GAAG,CACbI,KADa,EAEbC,QAFa,EAGbV,OAHa,KAIV;AACH,MAAIQ,QAAQ,CAACC,KAAD,EAAQC,QAAR,CAAZ,EAA+B;AAC7B,QAAIM,IAAI,GAAGD,YAAY,CAACN,KAAD,EAAQC,QAAR,CAAvB;AACAM,IAAAA,IAAI,CAACC,aAAL,CAAmBC,IAAnB,CAAwBlB,OAAxB;AACD,GAHD,MAGO;AACLS,IAAAA,KAAK,CAACS,IAAN,CAAW;AAAEL,MAAAA,IAAI,EAAEH,QAAR;AAAkBO,MAAAA,aAAa,EAAE,CAACjB,OAAD;AAAjC,KAAX;AACD;AACF,CAXD","sourcesContent":["import moment from 'moment'\r\nimport { ITitleBase } from './../Interfaceses/ITitleBase'\r\nimport { ITitleDropdownList } from './../Interfaceses/ITitleDropdownList'\r\nimport 'moment/locale/ru'\r\nimport dateFormatter from './dateFormatter'\r\nimport capitalize from './capitalize'\r\n\r\n//TODO: Избавиться от Code Polution\r\n\r\nexport interface GroupEntity {}\r\n\r\nexport let createScheduleChunk = (\r\n  entities: Array<ITitleBase>,\r\n): Array<ITitleDropdownList> => {\r\n  let result: Array<ITitleDropdownList> = []\r\n\r\n  entities.forEach((element: ITitleBase) => {\r\n    const date = capitalize(\r\n      moment(element.episodeReleaseTime).locale('ru').format('dddd'),\r\n    )\r\n    addTitle(result, date, element)\r\n  })\r\n  return result\r\n}\r\n\r\nexport let createLastUpdatedChunk = (\r\n  entities: Array<ITitleBase>,\r\n): Array<ITitleDropdownList> => {\r\n  let result: Array<ITitleDropdownList> = []\r\n\r\n  entities.forEach((element: ITitleBase) => {\r\n    const date = dateFormatter(element.lastUpdated)\r\n    addTitle(result, date, element)\r\n  })\r\n  return result\r\n}\r\n\r\nlet contains = (array: Array<ITitleDropdownList>, selector: string) =>\r\n  array.filter((elementCat) => elementCat.name === selector).length > 0\r\n\r\nlet getFirstList = (array: Array<ITitleDropdownList>, selector: string) =>\r\n  array.filter((elementCat) => elementCat.name === selector)[0]\r\n\r\nlet addTitle = (\r\n  array: Array<ITitleDropdownList>,\r\n  selector: string,\r\n  element: ITitleBase,\r\n) => {\r\n  if (contains(array, selector)) {\r\n    let list = getFirstList(array, selector)\r\n    list.titleElements.push(element)\r\n  } else {\r\n    array.push({ name: selector, titleElements: [element] })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}