{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { apiCallBegan } from '../actions/api';\nimport filterToApi from '../../helperFunctions/FilterToApi';\nconst initialState = {\n  titleBases: []\n};\nexport const titleSlice = createSlice({\n  name: 'titleBases',\n  initialState,\n  reducers: {\n    titleBasesRecevied: (state, action) => {\n      state.titleBases = action.payload;\n    }\n  }\n});\nexport default titleSlice.reducer;\nexport const {\n  titleBasesRecevied\n} = titleSlice.actions;\nexport const loadTitleBases = filter => {\n  const params = typeof filter === 'undefined' ? null : filterToApi(filter);\n  const apiData = {\n    url: '/titleBases',\n    onSuccess: titleSlice.actions.titleBasesRecevied.type,\n    params\n  };\n  return apiCallBegan(apiData);\n};","map":{"version":3,"sources":["C:/projects/video-hoster/frontend/src/store/slices/titleSlice.ts"],"names":["createSlice","apiCallBegan","filterToApi","initialState","titleBases","titleSlice","name","reducers","titleBasesRecevied","state","action","payload","reducer","actions","loadTitleBases","filter","params","apiData","url","onSuccess","type"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,YAAT,QAAuC,gBAAvC;AAKA,OAAOC,WAAP,MAAwB,mCAAxB;AAMA,MAAMC,YAAiC,GAAG;AACxCC,EAAAA,UAAU,EAAE;AAD4B,CAA1C;AAGA,OAAO,MAAMC,UAAU,GAAGL,WAAW,CAAC;AACpCM,EAAAA,IAAI,EAAE,YAD8B;AAEpCH,EAAAA,YAFoC;AAGpCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,EAAE,CAACC,KAAD,EAA6BC,MAA7B,KAAwC;AAC1DD,MAAAA,KAAK,CAACL,UAAN,GAAmBM,MAAM,CAACC,OAA1B;AACD;AAHO;AAH0B,CAAD,CAA9B;AAUP,eAAeN,UAAU,CAACO,OAA1B;AACA,OAAO,MAAM;AAAEJ,EAAAA;AAAF,IAAyBH,UAAU,CAACQ,OAA1C;AAEP,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAA2B;AACvD,QAAMC,MAAM,GAAG,OAAOD,MAAP,KAAkB,WAAlB,GAAgC,IAAhC,GAAuCb,WAAW,CAACa,MAAD,CAAjE;AAEA,QAAME,OAAiB,GAAG;AACxBC,IAAAA,GAAG,EAAE,aADmB;AAExBC,IAAAA,SAAS,EAAEd,UAAU,CAACQ,OAAX,CAAmBL,kBAAnB,CAAsCY,IAFzB;AAGxBJ,IAAAA;AAHwB,GAA1B;AAMA,SAAOf,YAAY,CAACgB,OAAD,CAAnB;AACD,CAVM","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { apiCallBegan, IApiData } from '../actions/api'\r\nimport { ITitleBase } from '../../Interfaceses/ITitleBase'\r\nimport { store } from '../store'\r\nimport { stat } from 'fs'\r\nimport { ITitleFilter } from '../../Interfaceses/ITitleFilter'\r\nimport filterToApi from '../../helperFunctions/FilterToApi'\r\n\r\ninterface TitleBaseSliceState {\r\n  titleBases: Array<ITitleBase>\r\n}\r\n\r\nconst initialState: TitleBaseSliceState = {\r\n  titleBases: [],\r\n}\r\nexport const titleSlice = createSlice({\r\n  name: 'titleBases',\r\n  initialState,\r\n  reducers: {\r\n    titleBasesRecevied: (state: TitleBaseSliceState, action) => {\r\n      state.titleBases = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport default titleSlice.reducer\r\nexport const { titleBasesRecevied } = titleSlice.actions\r\n\r\nexport const loadTitleBases = (filter?: ITitleFilter) => {\r\n  const params = typeof filter === 'undefined' ? null : filterToApi(filter)\r\n\r\n  const apiData: IApiData = {\r\n    url: '/titleBases',\r\n    onSuccess: titleSlice.actions.titleBasesRecevied.type,\r\n    params,\r\n  }\r\n\r\n  return apiCallBegan(apiData)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}