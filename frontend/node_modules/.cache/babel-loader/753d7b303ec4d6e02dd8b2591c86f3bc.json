{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { apiCallBegan } from '../actions/api';\nimport filterToApi from './../../helperFunctions/FilterToApi';\nconst initialState = {\n  titleSearch: [],\n  topRaitedTitles: [],\n  updatedTitles: [],\n  newTitles: []\n};\nexport const titleSlice = createSlice({\n  name: 'titleBases',\n  initialState,\n  reducers: {\n    titleSearchRecevied: (state, action) => {\n      state.titleSearch = [...state.titleSearch, ...action.payload];\n    },\n    topRatiedTitlesRecevied: (state, action) => {\n      state.topRaitedTitles = [...state.topRaitedTitles, ...action.payload];\n    },\n    updatedTitlesRecevied: (state, action) => {\n      state.updatedTitles = [...state.updatedTitles, ...action.payload];\n    },\n    newTitlesRecevied: (state, action) => {\n      state.newTitles = [...state.newTitles, ...action.payload];\n    }\n  }\n});\nexport default titleSlice.reducer;\nexport const {\n  titleSearchRecevied\n} = titleSlice.actions;\nconst test = {\n  filterBy: 'name',\n  generes: [{\n    id: '5f21cff0be1c26a030a74cc5',\n    name: 'nvm'\n  }, {\n    id: '5f21cff0be1c26a030afdh4cc5',\n    name: 'nvm'\n  }],\n  releaseRange: {\n    from: new Date(2012, 12, 12),\n    to: new Date(2012, 12, 12)\n  }\n};\nexport const loadTitleBases = filter => {\n  if (typeof filter === 'undefined') filter = {\n    ItemsToTake: 5\n  };\n  const apiData = {\n    url: '/titleBases',\n    onSuccess: titleSlice.actions.titleSearchRecevied.type,\n    params: filterToApi(test)\n  };\n  return apiCallBegan(apiData);\n};","map":{"version":3,"sources":["C:/projects/video-hoster/frontend/src/store/slices/TitleSlice.ts"],"names":["createSlice","apiCallBegan","filterToApi","initialState","titleSearch","topRaitedTitles","updatedTitles","newTitles","titleSlice","name","reducers","titleSearchRecevied","state","action","payload","topRatiedTitlesRecevied","updatedTitlesRecevied","newTitlesRecevied","reducer","actions","test","filterBy","generes","id","releaseRange","from","Date","to","loadTitleBases","filter","ItemsToTake","apiData","url","onSuccess","type","params"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,YAAT,QAAuC,gBAAvC;AAKA,OAAOC,WAAP,MAAwB,qCAAxB;AASA,MAAMC,YAAiC,GAAG;AACxCC,EAAAA,WAAW,EAAE,EAD2B;AAExCC,EAAAA,eAAe,EAAE,EAFuB;AAGxCC,EAAAA,aAAa,EAAE,EAHyB;AAIxCC,EAAAA,SAAS,EAAE;AAJ6B,CAA1C;AAMA,OAAO,MAAMC,UAAU,GAAGR,WAAW,CAAC;AACpCS,EAAAA,IAAI,EAAE,YAD8B;AAEpCN,EAAAA,YAFoC;AAGpCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBAAmB,EAAE,CAACC,KAAD,EAA6BC,MAA7B,KAAwC;AAC3DD,MAAAA,KAAK,CAACR,WAAN,GAAoB,CAAC,GAAGQ,KAAK,CAACR,WAAV,EAAuB,GAAGS,MAAM,CAACC,OAAjC,CAApB;AACD,KAHO;AAIRC,IAAAA,uBAAuB,EAAE,CAACH,KAAD,EAA6BC,MAA7B,KAAwC;AAC/DD,MAAAA,KAAK,CAACP,eAAN,GAAwB,CAAC,GAAGO,KAAK,CAACP,eAAV,EAA2B,GAAGQ,MAAM,CAACC,OAArC,CAAxB;AACD,KANO;AAORE,IAAAA,qBAAqB,EAAE,CAACJ,KAAD,EAA6BC,MAA7B,KAAwC;AAC7DD,MAAAA,KAAK,CAACN,aAAN,GAAsB,CAAC,GAAGM,KAAK,CAACN,aAAV,EAAyB,GAAGO,MAAM,CAACC,OAAnC,CAAtB;AACD,KATO;AAURG,IAAAA,iBAAiB,EAAE,CAACL,KAAD,EAA6BC,MAA7B,KAAwC;AACzDD,MAAAA,KAAK,CAACL,SAAN,GAAkB,CAAC,GAAGK,KAAK,CAACL,SAAV,EAAqB,GAAGM,MAAM,CAACC,OAA/B,CAAlB;AACD;AAZO;AAH0B,CAAD,CAA9B;AAmBP,eAAeN,UAAU,CAACU,OAA1B;AACA,OAAO,MAAM;AAAEP,EAAAA;AAAF,IAA0BH,UAAU,CAACW,OAA3C;AAEP,MAAMC,IAAkB,GAAG;AACzBC,EAAAA,QAAQ,EAAE,MADe;AAEzBC,EAAAA,OAAO,EAAE,CACP;AAAEC,IAAAA,EAAE,EAAE,0BAAN;AAAkCd,IAAAA,IAAI,EAAE;AAAxC,GADO,EAEP;AAAEc,IAAAA,EAAE,EAAE,4BAAN;AAAoCd,IAAAA,IAAI,EAAE;AAA1C,GAFO,CAFgB;AAOzBe,EAAAA,YAAY,EAAE;AAAEC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,EAAf,EAAmB,EAAnB,CAAR;AAAgCC,IAAAA,EAAE,EAAE,IAAID,IAAJ,CAAS,IAAT,EAAe,EAAf,EAAmB,EAAnB;AAApC;AAPW,CAA3B;AAUA,OAAO,MAAME,cAAc,GAAIC,MAAD,IAA2B;AACvD,MAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmCA,MAAM,GAAG;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAAT;AACnC,QAAMC,OAAiB,GAAG;AACxBC,IAAAA,GAAG,EAAE,aADmB;AAExBC,IAAAA,SAAS,EAAEzB,UAAU,CAACW,OAAX,CAAmBR,mBAAnB,CAAuCuB,IAF1B;AAGxBC,IAAAA,MAAM,EAAEjC,WAAW,CAACkB,IAAD;AAHK,GAA1B;AAMA,SAAOnB,YAAY,CAAC8B,OAAD,CAAnB;AACD,CATM","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { apiCallBegan, IApiData } from '../actions/api'\r\nimport { ITitleBase } from '../../Interfaceses/ITitleBase'\r\nimport { store } from '../store'\r\nimport { stat } from 'fs'\r\nimport { ITitleFilter } from './../../Interfaceses/ITitleFilter'\r\nimport filterToApi from './../../helperFunctions/FilterToApi'\r\n\r\ninterface TitleBaseSliceState {\r\n  titleSearch: Array<ITitleBase>\r\n  topRaitedTitles: Array<ITitleBase>\r\n  updatedTitles: Array<ITitleBase>\r\n  newTitles: Array<ITitleBase>\r\n}\r\n\r\nconst initialState: TitleBaseSliceState = {\r\n  titleSearch: [],\r\n  topRaitedTitles: [],\r\n  updatedTitles: [],\r\n  newTitles: [],\r\n}\r\nexport const titleSlice = createSlice({\r\n  name: 'titleBases',\r\n  initialState,\r\n  reducers: {\r\n    titleSearchRecevied: (state: TitleBaseSliceState, action) => {\r\n      state.titleSearch = [...state.titleSearch, ...action.payload]\r\n    },\r\n    topRatiedTitlesRecevied: (state: TitleBaseSliceState, action) => {\r\n      state.topRaitedTitles = [...state.topRaitedTitles, ...action.payload]\r\n    },\r\n    updatedTitlesRecevied: (state: TitleBaseSliceState, action) => {\r\n      state.updatedTitles = [...state.updatedTitles, ...action.payload]\r\n    },\r\n    newTitlesRecevied: (state: TitleBaseSliceState, action) => {\r\n      state.newTitles = [...state.newTitles, ...action.payload]\r\n    },\r\n  },\r\n})\r\n\r\nexport default titleSlice.reducer\r\nexport const { titleSearchRecevied } = titleSlice.actions\r\n\r\nconst test: ITitleFilter = {\r\n  filterBy: 'name',\r\n  generes: [\r\n    { id: '5f21cff0be1c26a030a74cc5', name: 'nvm' },\r\n    { id: '5f21cff0be1c26a030afdh4cc5', name: 'nvm' },\r\n  ],\r\n\r\n  releaseRange: { from: new Date(2012, 12, 12), to: new Date(2012, 12, 12) },\r\n}\r\n\r\nexport const loadTitleBases = (filter?: ITitleFilter) => {\r\n  if (typeof filter === 'undefined') filter = { ItemsToTake: 5 }\r\n  const apiData: IApiData = {\r\n    url: '/titleBases',\r\n    onSuccess: titleSlice.actions.titleSearchRecevied.type,\r\n    params: filterToApi(test),\r\n  }\r\n\r\n  return apiCallBegan(apiData)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}