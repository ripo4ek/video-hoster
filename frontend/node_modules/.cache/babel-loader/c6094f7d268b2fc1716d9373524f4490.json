{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport api from './middleware/api';\nimport rootReducer from './reducers/rootReducer';\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [...getDefaultMiddleware(), api]\n});","map":{"version":3,"sources":["C:/projects/video-hoster/frontend/src/store/store.ts"],"names":["configureStore","getDefaultMiddleware","api","rootReducer","store","reducer","middleware"],"mappings":"AAAA,SACEA,cADF,EAIEC,oBAJF,QAKO,kBALP;AAMA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,OAAO,MAAMC,KAAK,GAAGJ,cAAc,CAAC;AAClCK,EAAAA,OAAO,EAAEF,WADyB;AAElCG,EAAAA,UAAU,EAAE,CAAC,GAAGL,oBAAoB,EAAxB,EAA4BC,GAA5B;AAFsB,CAAD,CAA5B","sourcesContent":["import {\r\n  configureStore,\r\n  ThunkAction,\r\n  Action,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit'\r\nimport api from './middleware/api'\r\nimport rootReducer from './reducers/rootReducer'\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: [...getDefaultMiddleware(), api],\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>\r\n"]},"metadata":{},"sourceType":"module"}